[{"id":"93a170a0715d8b30cbd9c078c88d0425","title":"在C#中指定编译版本","content":"C#开发过程中，使用特定的语言版本编译程序作为初学者，在C#开发过程中一直困扰我的就是：我写好了程序，要发给其他人，但是！其他人电脑没有安装.NET6 无法直接运行我很想直接把程序编译成4.7.2版本的CLR（Win10以上都自带472了） 但是在VS里面死活没有472这个选项看了微软文档，了解到TargetFrameworkVersion，试着写了\n&lt;TargetFrameworkVersion&gt;v4.7.2&lt;&#x2F;TargetFrameworkVersion&gt;\n但是不管是472还是4.8还是不太行，看了看StackOverFlow和百度一圈都没有发现解决方案后来发现了 除了&lt;TargetFrameworkVersion&gt; 还有一个&lt;TargetFramework&gt;就试着去查查有没有相关的资料最后在SunnieShine大佬的《第 66 讲：C# 新语法的基本介绍》中找到了用法，这里我直接摘抄过来\n\n\n\n\n\n\n\n\n\n3-2 TargetFramework 元素介绍完 LangVersion 元素后，我们来说一下它上面的这个 TargetFramework 元素。这个可能不像是 LangVersion 一样可有可无，它总是显式给出，表示当前这个程序用的是什么版本的框架。刚才我们说到，.NET 有四种不同的框架类别，对应的书写格式是这样的：.NET Framework：记作 net数值，其中“数值”就是写版本号，不过小数点全部省略。比如 .NET Framework 4.7.2 框架写法是 net472；.NET Core：记作 netcoreapp数值，其中“数值”也是写版本号，但不省略小数点。比如 .NET Core 3.1 框架写法是 netcoreapp3.1；.NET Standard：记作 netstandard数值，其中“数值”也是写版本号，但不省略小数点。比如 .NET Standard 2.0 框架写法是 netstandard2.0；.NET：记作 net数值，其中“数值”也是写版本号，但不省略小数点。比如 .NET 5 框架写法是 net5.0。我们可以参照这个格式，然后看看你的电脑安装了什么版本的 .NET 框架，然后就把该框架写上去。不过按道理来说，你在创建项目和解决方案的时候，会让你选择，因此这一项很少自己去配置和修改它，除非你安装了新框架之后想要手动修改。还有一些别的数值可以填入进去，只不过这些会涉及到跨平台，而教程只涉及 C# 语法内容，因此这里不展开说明。想了解可以查看 MSDN 官方文档程序框架修改的相关内容。https://docs.microsoft.com/en-us/dotnet/standard/frameworks\n直接在里面写版本号就行了 不过要对应上面的写法\n&lt;PropertyGroup&gt;\n    &lt;TargetFramework&gt;net472&lt;&#x2F;TargetFramework&gt;\n&lt;&#x2F;PropertyGroup&gt;\n\n同时，还学到了使用LangVersion标记，在老版本的net中使用新版本的语法\n\n\n\n\n\n\n\n\n\n4-1 LangVersion 填值超过框架支持版本这种情况按理说是不允许的，但其实解决方案仍然允许我们这么做。新版的语法大概就只有两种类型：\n\n语法上更新了，但它等于是一句或多句代码的简化写法（语法糖）；\n从底层更新了，语法本身和框架的底层 API 绑定起来才能起效。\n\n\n\n\n\n\n\n\n\n\n所有的新语法不外乎就这两类情况。如果属于后者的话，这个语法可能你就无法使用，因为当前框架没有这样的 API，导致你无法使用这个语法来运行操作程序；但如果属于前者的话，那么编译器自动会被翻译成低阶的语法，但这些语法显然底层就支持也不依赖额外的 API，所以它跟框架版本本身没有特殊的关联。说这个干什么呢？我是在告诉你，如果你这么去修改配置文件的话，虽然是 Visual Studio 自己是允许你这么做的，但是部分新语法属于第二种情况，因而导致你无法正常使用它。那么具体是哪些新语法呢？这个得我们讲到这些语法的时候你才会知道了。\n","slug":"CSharpLangVersion","date":"2023-02-06T14:00:13.000Z","categories_index":"CSharp,编程","tags_index":"CSharp","author_index":"Akizon"},{"id":"73bf9ac22d3e16c14700745059a9a032","title":"使用Github+Cloudflare+Hexo搭建个人博客","content":"前言记录一次使用Hexo+Github+Cloud Flare部署静态博客的过程\n1.新建一个仓库 名字随意在Github主页新建仓库，名字随意（不需要名字为 xxxx.github.io）\n2.安装Hexo*先安装Node安装完找一个地方新建一个文件夹（例：C:\\Blog），用来存储博客的文件进入C:\\Blog,把cmd的目录切换到C:\\Blog 运行\n*再安装Hexo本体在cmd里输入npm install hexo-cli -g初始化hexo hexo init (注意目录一定要在空文件夹)创建本地预览 hexo s之后访问 localhost:4000 就可以看到网站了\n3.发布到Github仓库在C:\\Blog目录下输入 hexo clean &amp;&amp; hexo d后，会新建一个public文件夹，里面就是网站根目录之后将public的内容复制到GitHub就可以了\n4.创建CloudFlare Pages*登录到Cloud Flare 创建一个Pages并且绑定到Github仓库在Cloud Flare Dashboard侧边栏选择Pages 之后新建Pages（Create a project）连接到Git（Connect to Git） 选择刚刚建好的仓库，输入项目名称，下一步\n*设置编译环境Framework preset（预设框架）选择None，Build command（构建指令）输入exit 0 ，Build output directory（输出目录）为空 \n*发布到Cloud flare网络13:38:10.639\t✨ Upload complete!\n13:38:11.999\tSuccess: Assets published!\n13:38:12.758\tSuccess: Your site was deployed!\n在Cloudflare日志出现这些就是成功了，同时会出现一个URL，访问它就可以查看网页了\n5.绑定域名在Pages里打开项目 选择Custom domains-Add a custom domain输入你自己的域名就可以绑定了，如果域名托管在CloudFlare直接下一步就行，没有托管的话需要修改一下CNAME记录\n","slug":"use-Github-CloudFlare-Hexo-Build-a-website","date":"2023-02-06T06:10:16.000Z","categories_index":"教程","tags_index":"Github,CloudFlare,Hexo,Blog","author_index":"Akizon"},{"id":"c4c4a1880a574e028fe3e74020fbf42f","title":"TestPage","content":"Hello，This is A test page","slug":"TestPage","date":"2023-02-06T05:28:38.000Z","categories_index":"","tags_index":"","author_index":"Akizon"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-02-06T05:03:40.494Z","categories_index":"","tags_index":"","author_index":"Akizon"}]